/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is order agent.
 *
 */
public class Order  {

    /**
     *
     * Task Status
     * @field status
     *
     */
    @Parameter (displayName = "Tasks' Status", usageName = "status")
    public HashMap<Task,Boolean> getStatus() {
        return status
    }
    public void setStatus(HashMap<Task,Boolean> newValue) {
        status = newValue
    }
    public HashMap<Task,Boolean> status = new HashMap<Task,Boolean>()

    /**
     *
     * The order owner, if not only one
     * @field owner
     *
     */
    @Parameter (displayName = "Owner", usageName = "owner")
    public ArrayList getOwner() {
        return owner
    }
    public void setOwner(ArrayList newValue) {
        owner = newValue
    }
    public ArrayList owner = new ArrayList()

    /**
     *
     * The order amount
     * @field amount
     *
     */
    @Parameter (displayName = "Amount", usageName = "amount")
    public int getAmount() {
        return amount
    }
    public void setAmount(int newValue) {
        amount = newValue
    }
    public int amount = 0

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Order " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method Add
     *
     */
    public void Add(Task t) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.status.put(t,false)
    }

    /**
     *
     * when one task finished, turn the status to true
     * @method Change
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Task',
        watcheeFieldNames = 'finish',
        triggerCondition = '$watchee.getMaster().contains($watcher.toString())',
        whenToTrigger = WatcherTriggerSchedule.IMMEDIATE,
        scheduleTriggerDelta = 0d
    )
    public void Change(Task t) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Update the tasks' status
        this.status.replace(t,true)
    }

    /**
     *
     * Set the owner is add to the owner list
     * @method addOwner
     *
     */
    public void addOwner(String ownerID) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // add owner to the list
        this.owner.add(ownerID)
    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

