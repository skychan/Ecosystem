/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class Service extends ecosystem.Machine  {

    /**
     *
     * This is an agent property.
     * @field resourceComposition
     *
     */
    @Parameter (displayName = "Resource Composition", usageName = "resourceComposition")
    public Map getResourceComposition() {
        return resourceComposition
    }
    public void setResourceComposition(Map newValue) {
        resourceComposition = newValue
    }
    public Map resourceComposition = [:]

    /**
     *
     * This is an agent property.
     * @field resourceContribution
     *
     */
    @Parameter (displayName = "Resource Contribution", usageName = "resourceContribution")
    public Map getResourceContribution() {
        return resourceContribution
    }
    public void setResourceContribution(Map newValue) {
        resourceContribution = newValue
    }
    public Map resourceContribution = [:]

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Service " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method Service
     *
     */
    public def Service() {

        // This is a task.
        responseBehavior = new ServiceResponse()
        assignBehavior = new ServiceAssign()
        releaseBehavior  = new ServiceRelease()
    }

    /**
     *
     * This is the step behavior.
     * @method OutSource
     *
     */
    @ScheduledMethod(
        start = 1d,
        interval = 1d,
        shuffle = true
    )
    public void OutSource() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (RunEnvironment.getInstance().getParameters().getValue("Outsource")) {


            // This is an agent decision.
            if (this.jobList.size() > 0 && RandomHelper.nextIntFromTo(0,5) >3) {

                // This is a task.
                List tempList = this.buffer + this.jobList
                // tempList.sort{}
                Task theTask = tempList[0]

                // This is an agent decision.
                if (theTask in this.buffer) {


                    // This is an agent decision.
                    if (theTask.remainingTime > 1) {

                        // This is a task.
                        theTask.setPause(true)
                        theTask.setAllocated(false)
                        theTask.remainingTime -= 1

                    } else  {


                    }

                } else  {

                    // This is a task.
                    theTask.setAllocated(false)

                }

            } else  {


            }

        } else  {


        }
    }

    /**
     *
     * Calculate weighted average
     * @method WM
     *
     */
    public def WM(dataMap) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        double tempsum = 0
        int n = 0

        // This is a loop.
        for (data in dataMap) {

            // This is a task.
            tempsum += data.key.mu*data.value
            n += data.value

        }

        // This is a task.
        returnValue = tempsum/n
        // Return the results.
        return returnValue

    }

    /**
     *
     * Calculate the standard variation
     * @method WSTD
     *
     */
    public def WSTD(dataMap) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        double tempsum = 0
        int n = 0

        // This is a loop.
        for (data in dataMap) {

            // This is a task.
            tempsum += data.key.sigma*data.key.sigma*data.value
            n += data.value

        }

        // This is a task.
        returnValue = Math.sqrt(tempsum/n)
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method setValues
     *
     */
    public void setValues(serviceData) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.resourceContribution = serviceData
        // This is a task.
        this.mu = this.WM(serviceData)
        this.sigma = this.WSTD(serviceData)

        // This is a loop.
        for (data in serviceData) {


            // This is an agent decision.
            if (data.key.getType() in this.resourceComposition) {

                // This is a task.
                this.resourceComposition[data.key.getType()] += data.value

            } else  {

                // This is a task.
                this.resourceComposition[data.key.getType()] = data.value

            }

        }

    }

    /**
     *
     * This is the step behavior.
     * @method ReturnResources
     *
     */
    public void ReturnResources() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is a loop.
        for (resData in this.resourceContribution) {

            // This is a task.
            resData.key.sourceable += resData.value
            resData.key.capacity += resData.value

        }

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

