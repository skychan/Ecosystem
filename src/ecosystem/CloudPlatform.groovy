/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * Platform of cloud mfg
 *
 */
public class CloudPlatform  {

    /**
     *
     * User list to record the user exist in the platform
     * @field userList
     *
     */
    @Parameter (displayName = "User List", usageName = "userList")
    public ArrayList getUserList() {
        return userList
    }
    public void setUserList(ArrayList newValue) {
        userList = newValue
    }
    public ArrayList userList = new ArrayList()

    /**
     *
     * This is an agent property.
     * @field mean1
     *
     */
    @Parameter (displayName = "Mean1", usageName = "mean1")
    public double getMean1() {
        return mean1
    }
    public void setMean1(double newValue) {
        mean1 = newValue
    }
    public double mean1 = 0.16

    /**
     *
     * Count the fininshed jobs
     * @field finishCount
     *
     */
    @Parameter (displayName = "Finish Count", usageName = "finishCount")
    public int getFinishCount() {
        return finishCount
    }
    public void setFinishCount(int newValue) {
        finishCount = newValue
    }
    public int finishCount = 0

    /**
     *
     * Mark the resource type count with quality [type:[quality:quantity]]
     * @field typeQuality
     *
     */
    @Parameter (displayName = "Resource type count", usageName = "typeQuality")
    public def getTypeQuality() {
        return typeQuality
    }
    public void setTypeQuality(def newValue) {
        typeQuality = newValue
    }
    public def typeQuality = [:]

    /**
     *
     * This is an agent property.
     * @field typeQueueLength
     *
     */
    @Parameter (displayName = "Resource Queue", usageName = "typeQueueLength")
    public def getTypeQueueLength() {
        return typeQueueLength
    }
    public void setTypeQueueLength(def newValue) {
        typeQueueLength = newValue
    }
    public def typeQueueLength = [:]

    /**
     *
     * This is an agent property.
     * @field serdata
     *
     */
    @Parameter (displayName = "Service Call Data", usageName = "serdata")
    public def getSerdata() {
        return serdata
    }
    public void setSerdata(def newValue) {
        serdata = newValue
    }
    public def serdata = [[2:1,3:1,4:1],
						[2:4],
						[2:6],
						[1:1],
						[3:5,4:7],
						[2:7,3:7,4:5],
						[1:7,2:6,4:5],
						[1:7,4:6],
						[1:5,2:6,3:7,4:6]]

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "CloudPlatform " + (agentIDCounter++)

    /**
     *
     * Add user including pure and complex users
     * @method addUser
     *
     */
    public void addUser(userID) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.userList << userID
    }

    /**
     *
     * Eliminate user include pure and complex users
     * @method EliminateUser
     *
     */
    public void EliminateUser(Object o) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.userList.remove(o)
    }

    /**
     *
     * Create provider procedure
     * @method CreateProvider
     *
     */
    public void CreateProvider() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Create Provider at a random distribution
        Provider pagent = CreateAgent("Ecosystem", "ecosystem.Provider")
        // pagent.GenerateResource(this.typeQuality,this.typeQueueLength)
        pagent.GenerateResource()
    }

    /**
     *
     * catch the finish task and add the count
     * @method Accumulator
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Job',
        watcheeFieldNames = 'finish',
        whenToTrigger = WatcherTriggerSchedule.IMMEDIATE,
        scheduleTriggerDelta = 1d
    )
    public def Accumulator(ecosystem.Job watchedAgent) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.finishCount ++
        println "finish watched "
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method Indexing
     *
     */
    public def Indexing(res) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (res.getType() in this.typeQuality.keySet()) {


            // This is an agent decision.
            if (res.getQuality() in this.typeQuality[res.getType()].keySet()) {

                // This is a task.
                this.typeQuality[res.getType()][res.getQuality()] += res.getCapacity()

            } else  {

                // This is a task.
                this.typeQuality[res.getType()][res.getQuality()] = res.getCapacity()

            }
            // This is a task.
            println this.typeQuality

        } else  {

            // This is a task.
            this.typeQuality[res.getType()] = [:]
            this.typeQuality[res.getType()][res.getQuality()] = res.getCapacity()

        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method Queue
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Resource',
        watcheeFieldNames = 'queue',
        whenToTrigger = WatcherTriggerSchedule.IMMEDIATE,
        scheduleTriggerDelta = 1d
    )
    public def Queue(ecosystem.Resource watchedAgent) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (watchedAgent.getQueue()) {

            // This is a task.
            this.typeQueueLength[watchedAgent.getType()] += 1

        } else  {

            // This is a task.
            this.typeQueueLength[watchedAgent.getType()] -= 1

        }
        // This is a task.
        println this.typeQueueLength
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method NewQueue
     *
     */
    public def NewQueue(res) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (res.getType() in this.typeQueueLength.keySet()) {

            // This is a task.
            this.typeQueueLength[res.getType()] = 0

        } else  {


        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method generateServiceCall
     *
     */
    @ScheduledMethod(
        start = 1d,
        interval = 1d,
        shuffle = true
    )
    public def generateServiceCall() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        int i = RandomHelper.nextIntFromTo(0,this.serdata.size()-1)
        def data = this.serdata[i]
        // This is a task.
        ServiceCall sagent = CreateAgent("Ecosystem", "ecosystem.ServiceCall")
        sagent.setParameters(data)
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

