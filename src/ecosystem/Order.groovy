/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is order agent.
 *
 */
public class Order  {

    /**
     *
     * The order owner, if not only one
     * @field ownerList
     *
     */
    @Parameter (displayName = "Owner List", usageName = "ownerList")
    public ArrayList getOwnerList() {
        return ownerList
    }
    public void setOwnerList(ArrayList newValue) {
        ownerList = newValue
    }
    public ArrayList ownerList = new ArrayList()

    /**
     *
     * The order amount
     * @field amount
     *
     */
    @Parameter (displayName = "Amount", usageName = "amount")
    public int getAmount() {
        return amount
    }
    public void setAmount(int newValue) {
        amount = newValue
    }
    public int amount = 0

    /**
     *
     * Record the allocated service
     * @field allocatedService
     *
     */
    @Parameter (displayName = "Service", usageName = "allocatedService")
    public Service getAllocatedService() {
        return allocatedService
    }
    public void setAllocatedService(Service newValue) {
        allocatedService = newValue
    }
    public Service allocatedService = null

    /**
     *
     * Record the candidates
     * @field candidates
     *
     */
    @Parameter (displayName = "Candidates", usageName = "candidates")
    public def getCandidates() {
        return candidates
    }
    public void setCandidates(def newValue) {
        candidates = newValue
    }
    public def candidates = []

    /**
     *
     * Record the current owner
     * @field owner
     *
     */
    @Parameter (displayName = "Current owner", usageName = "owner")
    public def getOwner() {
        return owner
    }
    public void setOwner(def newValue) {
        owner = newValue
    }
    public def owner = null

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Order " + (agentIDCounter++)

    /**
     *
     * Set the owner is add to the owner list
     * @method addOwner
     *
     */
    public void addOwner(Object od) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // add owner to the list
        this.getOwnerList().add(od)
    }

    /**
     *
     * Select provider
     * @method Select
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.PureDemander',
        watcheeFieldNames = 'need',
        triggerCondition = '$watchee.getNewOrder().equals($watcher)',
        whenToTrigger = WatcherTriggerSchedule.LATER,
        scheduleTriggerDelta = 0.3d,
        scheduleTriggerPriority = -1.7976931348623157E308d
    )
    public def Select(ecosystem.PureDemander watchedAgent) {

        // Select proper supplier with evaluation
        println "candidates are "+this.getCandidates()
        Evaluation()
        println "after sort we have " +this.getCandidates()
        this.setAllocatedService(this.getCandidates()[0])
        this.getAllocatedService().getJobList().add(this)
        // Reset the candidates after selection
        this.candidates.clear()
        System.out.println("Provider Chosen: "+this.allocatedService)
    }

    /**
     *
     * Add the competitor
     * @method AddCompetitor
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Service',
        watcheeFieldNames = 'compete',
        triggerCondition = '$watchee.getCompete().equals($watcher)',
        whenToTrigger = WatcherTriggerSchedule.LATER,
        scheduleTriggerDelta = 0.1d,
        scheduleTriggerPriority = 1.7976931348623157E308d
    )
    public def AddCompetitor(ecosystem.Service watchedAgent) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Add to the temp candidates list
        this.candidates << watchedAgent
        println "just add "+ watchedAgent
        // Return the results.
        return returnValue

    }

    /**
     *
     * Supplier Evaluation
     * @method Evaluation
     *
     */
    public def Evaluation() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.getCandidates().sort{[it.jobList.size(),it.jobList[0]]}
        // Return the results.
        return returnValue

    }

    /**
     *
     * Review the transaction
     * @method Review
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Service',
        watcheeFieldNames = 'finish',
        triggerCondition = '$watchee.getOrder().equals($watcher)',
        whenToTrigger = WatcherTriggerSchedule.IMMEDIATE
    )
    public def Review(ecosystem.Service watchedAgent) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Review and Commit
        println "review and commit"
        def rvalue = 0
        watchedAgent.AddReview(rvalue)
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

