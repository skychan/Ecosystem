/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * Platform of cloud mfg
 *
 */
public class CloudPlatform  {

    /**
     *
     * User list to record the user exist in the platform
     * @field userList
     *
     */
    @Parameter (displayName = "User List", usageName = "userList")
    public ArrayList getUserList() {
        return userList
    }
    public void setUserList(ArrayList newValue) {
        userList = newValue
    }
    public ArrayList userList = new ArrayList()

    /**
     *
     * This is an agent property.
     * @field mean1
     *
     */
    @Parameter (displayName = "Mean1", usageName = "mean1")
    public double getMean1() {
        return mean1
    }
    public void setMean1(double newValue) {
        mean1 = newValue
    }
    public double mean1 = 0.16

    /**
     *
     * Count the fininshed jobs
     * @field finishCount
     *
     */
    @Parameter (displayName = "Finish Count", usageName = "finishCount")
    public int getFinishCount() {
        return finishCount
    }
    public void setFinishCount(int newValue) {
        finishCount = newValue
    }
    public int finishCount = 0

    /**
     *
     * This is an agent property.
     * @field providerCount
     *
     */
    @Parameter (displayName = "Provider Count", usageName = "providerCount")
    public int getProviderCount() {
        return providerCount
    }
    public void setProviderCount(int newValue) {
        providerCount = newValue
    }
    public int providerCount = 50

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "CloudPlatform " + (agentIDCounter++)

    /**
     *
     * Add user including pure and complex users
     * @method addUser
     *
     */
    public void addUser(userID) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.userList << userID
    }

    /**
     *
     * Eliminate user include pure and complex users
     * @method EliminateUser
     *
     */
    public void EliminateUser(Object o) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.userList.remove(o)
    }

    /**
     *
     * Create provider procedure
     * @method CreateProvider
     *
     */
    public void CreateProvider() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // to need or not
        if (RandomHelper.nextIntFromTo(0, 1)) {


            // This is a loop.
            for (int i in 0..<providerCount) {

                // Create Provider at a random distribution
                Object agent = CreateAgent("Ecosystem", "ecosystem.PureProvider")
                PureProvider pagent = (PureProvider) agent
                pagent.GenerateResource()
                this.AddUser(pagent)

            }


        } else  {


        }
    }

    /**
     *
     * catch the finish task and add the count
     * @method Accumulator
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Task',
        watcheeFieldNames = 'finish',
        whenToTrigger = WatcherTriggerSchedule.IMMEDIATE,
        scheduleTriggerDelta = 1d
    )
    public def Accumulator(ecosystem.Task watchedAgent) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.finishCount ++
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

