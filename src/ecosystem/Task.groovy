/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class Task  {

    /**
     *
     * This is an agent property.
     * @field type
     *
     */
    @Parameter (displayName = "Type", usageName = "type")
    public String getType() {
        return type
    }
    public void setType(String newValue) {
        type = newValue
    }
    public String type = ""

    /**
     *
     * This is an agent property.
     * @field needResourceCapacity
     *
     */
    @Parameter (displayName = "NeedResourceCapacity", usageName = "needResourceCapacity")
    public Map<String,Integer> getNeedResourceCapacity() {
        return needResourceCapacity
    }
    public void setNeedResourceCapacity(Map<String,Integer> newValue) {
        needResourceCapacity = newValue
    }
    public Map<String,Integer> needResourceCapacity = new HashMap<String,Integer>()

    /**
     *
     * This is an agent property.
     * @field processingTime
     *
     */
    @Parameter (displayName = "ProcessingTime", usageName = "processingTime")
    public Map<String,Integer> getProcessingTime() {
        return processingTime
    }
    public void setProcessingTime(Map<String,Integer> newValue) {
        processingTime = newValue
    }
    public Map<String,Integer> processingTime = new HashMap<String,Integer>()

    /**
     *
     * This is an agent property.
     * @field alternations
     *
     */
    @Parameter (displayName = "Alternations", usageName = "alternations")
    public List<String> getAlternations() {
        return alternations
    }
    public void setAlternations(List<String> newValue) {
        alternations = newValue
    }
    public List<String> alternations = new ArrayList<String>()

    /**
     *
     * This is an agent property.
     * @field selectedResource
     *
     */
    @Parameter (displayName = "Selected Resource", usageName = "selectedResource")
    public String getSelectedResource() {
        return selectedResource
    }
    public void setSelectedResource(String newValue) {
        selectedResource = newValue
    }
    public String selectedResource = ""

    /**
     *
     * This is an agent property.
     * @field remainingTime
     *
     */
    @Parameter (displayName = "RemainingTime", usageName = "remainingTime")
    public int getRemainingTime() {
        return remainingTime
    }
    public void setRemainingTime(int newValue) {
        remainingTime = newValue
    }
    public int remainingTime = -1

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Task " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method Processing
     *
     */
    public void Processing() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        int remaintime = this.getRemainingTime()
        remaintime--
        this.setRemainingTime(remaintime)
    }

    /**
     *
     * This is the step behavior.
     * @method Select
     *
     */
    public void Select(String index) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.setSelectedResource(index)
        int remaintime = this.getProcessingTime().get(index)
        this.setRemainingTime(remaintime)
    }

    /**
     *
     * This is the step behavior.
     * @method SetValues
     *
     */
    public void SetValues() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        String path = "Matching/"+this.getType()
        List<String> data = Util.MatchResource(path)

        // This is a loop.
        for (String line in data) {

            // This is a task.
            String item[] = line.split(",")
            String resourceType = item[0]
            this.alternations.add(resourceType)
            this.processingTime.put(resourceType,Integer.parseInt(item[1]))
            this.needResourceCapacity.put(resourceType,Integer.parseInt(item[2]))

        }

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

