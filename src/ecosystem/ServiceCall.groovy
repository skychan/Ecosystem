/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class ServiceCall extends ecosystem.Job  {

    /**
     *
     * Record the owners of the task
     * @field owner
     *
     */
    @Parameter (displayName = "Owner", usageName = "owner")
    public ecosystem.Provider getOwner() {
        return owner
    }
    public void setOwner(ecosystem.Provider newValue) {
        owner = newValue
    }
    public ecosystem.Provider owner = null

    /**
     *
     * This is an agent property.
     * @field type
     *
     */
    @Parameter (displayName = "Type", usageName = "type")
    public String getType() {
        return type
    }
    public void setType(String newValue) {
        type = newValue
    }
    public String type = "ServiceCall"

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "ServiceCall " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method ServiceCall
     *
     */
    public def ServiceCall() {

        // This is a task.
        selectBehavior = new SelectInServiceCall()
        candidates.remove('service')
        processBehavior = new ProcessInServiceCall()
    }

    /**
     *
     * This is the step behavior.
     * @method setParameters
     *
     */
    public void setParameters(data) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.needResourceCapacity = data
        this.startTime = GetTickCount() 

        // This is a loop.
        for (type in data.keySet()) {

            // This is a task.
            this.candidates[type] = []

        }

    }

    /**
     *
     * Check if all the candidates are ready
     * @method CheckStatus
     *
     */
    @ScheduledMethod(
        start = 0.3d,
        interval = 1d,
        shuffle = true
    )
    public def CheckStatus() {

        // This is a task.
        def time = GetTickCount()

        // This is an agent decision.
        if (time - this.startTime >200) {

            // This is a task.
            this.recall()

        } else  {


            // This is an agent decision.
            if (this.getPrepareStatus().values().count(false) == 0 && this.getPrepareStatus().size()>0) {

                // This is a task.
                this.processBehavior.Process(this)
                this.prepareStatus = [:]

            } else  {


            }

        }
    }

    /**
     *
     * This is the step behavior.
     * @method recall
     *
     */
    public void recall() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (this.allocated) {


            // This is a loop.
            for (resdata in this.prepareStatus) {

                // This is a task.
                resdata.key.available += this.allocation[resdata.key]

                // This is an agent decision.
                if (resdata.value) {

                    // This is a task.
                    this.owner.RemoveServiceCall(this)

                } else  {

                    // This is a task.
                    resdata.key.jobList.remove(this)
                    this.owner.RemoveServiceCall(this)

                }

            }


        } else  {

            // This is a task.
            this.owner.RemoveServiceCall(this)

        }
    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

