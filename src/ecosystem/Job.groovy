/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class Job  {

    /**
     *
     * This is an agent property.
     * @field candidates
     *
     */
    @Parameter (displayName = "Candidates", usageName = "candidates")
    public Map getCandidates() {
        return candidates
    }
    public void setCandidates(Map newValue) {
        candidates = newValue
    }
    public Map candidates = ['service':[]]

    /**
     *
     * This is an agent property.
     * @field selectBehavior
     *
     */
    @Parameter (displayName = "SelectBehavior", usageName = "selectBehavior")
    public SelectBehavior getSelectBehavior() {
        return selectBehavior
    }
    public void setSelectBehavior(SelectBehavior newValue) {
        selectBehavior = newValue
    }
    public SelectBehavior selectBehavior = null

    /**
     *
     * This is an agent property.
     * @field theOnes
     *
     */
    @Parameter (displayName = "TheOnes", usageName = "theOnes")
    public Map getTheOnes() {
        return theOnes
    }
    public void setTheOnes(Map newValue) {
        theOnes = newValue
    }
    public Map theOnes = [:]

    /**
     *
     * This is an agent property.
     * @field type
     *
     */
    @Parameter (displayName = "Type", usageName = "type")
    public def getType() {
        return type
    }
    public void setType(def newValue) {
        type = newValue
    }
    public def type = 0

    /**
     *
     * This is an agent property.
     * @field needResourceCapacity
     *
     */
    @Parameter (displayName = "NeedResourceCapacity", usageName = "needResourceCapacity")
    public def getNeedResourceCapacity() {
        return needResourceCapacity
    }
    public void setNeedResourceCapacity(def newValue) {
        needResourceCapacity = newValue
    }
    public def needResourceCapacity = [:]

    /**
     *
     * the mark of the task stage
     * @field finish
     *
     */
    @Parameter (displayName = "Finish", usageName = "finish")
    public boolean getFinish() {
        return finish
    }
    public void setFinish(boolean newValue) {
        finish = newValue
    }
    public boolean finish = false

    /**
     *
     * Record the prepare status for selected ones
     * @field prepareStatus
     *
     */
    @Parameter (displayName = "Prepare Status", usageName = "prepareStatus")
    public Map getPrepareStatus() {
        return prepareStatus
    }
    public void setPrepareStatus(Map newValue) {
        prepareStatus = newValue
    }
    public Map prepareStatus = [:]

    /**
     *
     * Mark after the compete
     * @field inNeed
     *
     */
    @Parameter (displayName = "Need mark", usageName = "inNeed")
    public boolean getInNeed() {
        return inNeed
    }
    public void setInNeed(boolean newValue) {
        inNeed = newValue
    }
    public boolean inNeed = false

    /**
     *
     * This is an agent property.
     * @field startTime
     *
     */
    @Parameter (displayName = "Start time", usageName = "startTime")
    public double getStartTime() {
        return startTime
    }
    public void setStartTime(double newValue) {
        startTime = newValue
    }
    public double startTime = 0

    /**
     *
     * This is an agent property.
     * @field span
     *
     */
    @Parameter (displayName = "Span", usageName = "span")
    public int getSpan() {
        return span
    }
    public void setSpan(int newValue) {
        span = newValue
    }
    public int span = 0

    /**
     *
     * This is an agent property.
     * @field productQuality
     *
     */
    @Parameter (displayName = "Product Quality", usageName = "productQuality")
    public double getProductQuality() {
        return productQuality
    }
    public void setProductQuality(double newValue) {
        productQuality = newValue
    }
    public double productQuality = Math.exp(200)

    /**
     *
     * This is an agent property.
     * @field hardness
     *
     */
    @Parameter (displayName = "Hardness", usageName = "hardness")
    public double getHardness() {
        return hardness
    }
    public void setHardness(double newValue) {
        hardness = newValue
    }
    public double hardness = 0

    /**
     *
     * This is an agent property.
     * @field inBufferTime
     *
     */
    @Parameter (displayName = "InBuff time", usageName = "inBufferTime")
    public def getInBufferTime() {
        return inBufferTime
    }
    public void setInBufferTime(def newValue) {
        inBufferTime = newValue
    }
    public def inBufferTime = [:]

    /**
     *
     * This is an agent property.
     * @field reviews
     *
     */
    @Parameter (displayName = "Review Result", usageName = "reviews")
    public def getReviews() {
        return reviews
    }
    public void setReviews(def newValue) {
        reviews = newValue
    }
    public def reviews = []

    /**
     *
     * This is an agent property.
     * @field finishTime
     *
     */
    @Parameter (displayName = "Finish Time", usageName = "finishTime")
    public double getFinishTime() {
        return finishTime
    }
    public void setFinishTime(double newValue) {
        finishTime = newValue
    }
    public double finishTime = 0

    /**
     *
     * This is an agent property.
     * @field readyTime
     *
     */
    @Parameter (displayName = "Ready Time", usageName = "readyTime")
    public double getReadyTime() {
        return readyTime
    }
    public void setReadyTime(double newValue) {
        readyTime = newValue
    }
    public double readyTime = 0

    /**
     *
     * T -- service; F -- resources
     * @field choice
     *
     */
    @Parameter (displayName = "Choice", usageName = "choice")
    public boolean getChoice() {
        return choice
    }
    public void setChoice(boolean newValue) {
        choice = newValue
    }
    public boolean choice = false

    /**
     *
     * [type:res]
     * @field allocation
     *
     */
    @Parameter (displayName = "Allocation", usageName = "allocation")
    public Map getAllocation() {
        return allocation
    }
    public void setAllocation(Map newValue) {
        allocation = newValue
    }
    public Map allocation = [:]

    /**
     *
     * This is an agent property.
     * @field allocated
     *
     */
    @Parameter (displayName = "Allocated", usageName = "allocated")
    public boolean getAllocated() {
        return allocated
    }
    public void setAllocated(boolean newValue) {
        allocated = newValue
    }
    public boolean allocated = false

    /**
     *
     * This is an agent property.
     * @field processBehavior
     *
     */
    @Parameter (displayName = "Process Behavior", usageName = "processBehavior")
    public ProcessBehavior getProcessBehavior() {
        return processBehavior
    }
    public void setProcessBehavior(ProcessBehavior newValue) {
        processBehavior = newValue
    }
    public ProcessBehavior processBehavior = null

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Job " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method Select
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Job',
        watcheeFieldNames = 'inNeed',
        whenToTrigger = WatcherTriggerSchedule.LATER,
        scheduleTriggerDelta = 0.2d
    )
    public def Select(ecosystem.Job watchedAgent) {


        // This is an agent decision.
        if (watchedAgent.equals(this)) {

            // This is a task.
            this.theOnes = selectBehavior.Select(watchedAgent,this.candidates)
            Map result = selectBehavior.Allocate(this.theOnes)
            this.setAllocation(result.allocation)
            this.setAllocated(result.success)
            println " allocated ?" + this.allocated
            // This is a task.
            println toString() + "selected " + this.getAllocation()
            this.theOnes = [:]
            this.candidates.each{ entry -> entry.value = [] }

            // This is an agent decision.
            if (this.getAllocated()) {


                // This is a loop.
                for (mac in this.allocation) {


                    // This is an agent decision.
                    if (mac.key.getClass() == ecosystem.Resource) {

                        // This is a task.
                        this.prepareStatus[mac.key] = false

                    } else  {

                        // This is a task.
                        this.prepareStatus[mac.value] = false

                    }

                }

                // This is a task.
                selectBehavior.Assign(watchedAgent.allocation,this)
                println this.prepareStatus

            } else  {


            }

        } else  {


        }
    }

    /**
     *
     * This is the step behavior.
     * @method addCandidates
     *
     */
    public void addCandidates(competitor) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (competitor.getClass() == ecosystem.Service) {

            // This is a task.
            this.candidates['service'] << competitor

        } else  {

            // This is a task.
            this.candidates[competitor.getType()]<<competitor

        }
    }

    /**
     *
     * Ready to process means to reset the task status in case
     * @method Reset
     *
     */
    public def Reset() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.setPrepareStatus([:])
        this.setInNeed(false)
        // Return the results.
        return returnValue

    }

    /**
     *
     * Repeat
     * @method Need
     *
     */
    @ScheduledMethod(
        start = 0d,
        interval = 1d,
        shuffle = true
    )
    public void Need() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (this.getAllocated() == false) {

            // This is a task.
            this.setInNeed(true)
            //println this.toString() + " lack response so publish need again"

        } else  {


        }
    }

    /**
     *
     * Review and comment after the task is finished
     * @method Review
     *
     */
    public def Review(theRes) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        int t = this.getReayTime() - this.inBufferTime[theRes]
        int t2 = this.getFinishTime() - this.inBufferTime[theRes]
        int q = this.needResourceCapacity[theRes.getType()] * t2
        this.reviews << Math.exp(t)*q*theRes.getRank()
        // Return the results.
        return returnValue

    }

    /**
     *
     * Check if all the candidates are ready
     * @method CheckStatus
     *
     */
    @ScheduledMethod(
        start = 0.3d,
        interval = 1d,
        shuffle = true
    )
    public def CheckStatus() {


        // This is an agent decision.
        if (this.getPrepareStatus().values().count(false) == 0 && this.getPrepareStatus().size()>0) {

            // This is a task.
            this.processBehavior.Process(this)
            this.prepareStatus.each{it -> it.value = false}
            println ""
            println toString() + " is all ready"
            def templist = [:]
            for( mac in this.prepareStatus.keySet()){
            	templist[mac] = mac.getSourceable()
            }
            println templist

        } else  {


        }
    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

