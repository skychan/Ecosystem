/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class Task extends ecosystem.Job  {

    /**
     *
     * This is an agent property.
     * @field processingTime
     *
     */
    @Parameter (displayName = "ProcessingTime", usageName = "processingTime")
    public int getProcessingTime() {
        return processingTime
    }
    public void setProcessingTime(int newValue) {
        processingTime = newValue
    }
    public int processingTime = 0

    /**
     *
     * [user]
     * @field owner
     *
     */
    @Parameter (displayName = "Owner", usageName = "owner")
    public Map getOwner() {
        return owner
    }
    public void setOwner(Map newValue) {
        owner = newValue
    }
    public Map owner = [:]

    /**
     *
     * This is an agent property.
     * @field master
     *
     */
    @Parameter (displayName = "Master", usageName = "master")
    public ecosystem.Order getMaster() {
        return master
    }
    public void setMaster(ecosystem.Order newValue) {
        master = newValue
    }
    public ecosystem.Order master = null

    /**
     *
     * This is an agent property.
     * @field remainingTime
     *
     */
    @Parameter (displayName = "RemainingTime", usageName = "remainingTime")
    public int getRemainingTime() {
        return remainingTime
    }
    public void setRemainingTime(int newValue) {
        remainingTime = newValue
    }
    public int remainingTime = -1

    /**
     *
     * This is an agent property.
     * @field type
     *
     */
    @Parameter (displayName = "Type", usageName = "type")
    public String getType() {
        return type
    }
    public void setType(String newValue) {
        type = newValue
    }
    public String type = ""

    /**
     *
     * This is an agent property.
     * @field pause
     *
     */
    @Parameter (displayName = "Pause Mark", usageName = "pause")
    public boolean getPause() {
        return pause
    }
    public void setPause(boolean newValue) {
        pause = newValue
    }
    public boolean pause = true

    /**
     *
     * This is an agent property.
     * @field productQuality
     *
     */
    @Parameter (displayName = "Product Quality", usageName = "productQuality")
    public double getProductQuality() {
        return productQuality
    }
    public void setProductQuality(double newValue) {
        productQuality = newValue
    }
    public double productQuality = Math.exp(2000)

    /**
     *
     * This is an agent property.
     * @field expectQuality
     *
     */
    @Parameter (displayName = "Expect Quality", usageName = "expectQuality")
    public double getExpectQuality() {
        return expectQuality
    }
    public void setExpectQuality(double newValue) {
        expectQuality = newValue
    }
    public double expectQuality = Math.exp(2000)

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Task " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method Task
     *
     */
    public def Task() {

        // This is a task.
        selectBehavior = new SelectInTask()
        processBehavior = new ProcessInTask()
    }

    /**
     *
     * This is the step behavior.
     * @method setParameters
     *
     */
    public void setParameters(tdata) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is a loop.
        for (data in tdata.value) {


            // This is an agent decision.
            if (data.key == "p") {

                // This is a task.
                this.setProcessingTime(data.value)
                this.addOwner(this.getMaster().getOwner(),data.value)
                this.setRemainingTime(data.value)

            } else  {

                // This is a task.
                this.needResourceCapacity << data
                // this.prepareStatus[data.key] = false
                this.candidates[data.key] = []

            }

        }

        // This is a task.
        this.setStartTime(GetTickCount())
    }

    /**
     *
     * Process the task
     * @method Process
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Task',
        watcheeFieldNames = 'remainingTime',
        triggerCondition = '$watchee.equals($watcher)',
        whenToTrigger = WatcherTriggerSchedule.LATER,
        scheduleTriggerDelta = 1d
    )
    public def Process(ecosystem.Task watchedAgent) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (this.getRemainingTime() > 0 && !this.pause) {

            // This is a task.
            this.setRemainingTime(this.getRemainingTime()-1)

            // This is an agent decision.
            if (this.getRemainingTime() == 0) {


                // This is a loop.
                for (mac in this.getAllocation().values()) {

                    // The finish step
                    mac.Release(this)

                }


                // This is a loop.
                for (mac in this.getAllocation().values()) {

                    // This is a task.
                    mac.Finish(this.needResourceCapacity)
                    double realQ = mac.getQuality()

                    // This is an agent decision.
                    if (this.productQuality < realQ) {

                        // This is a task.
                        this.productQuality = realQ

                    } else  {


                    }

                }

                // This is a task.
                this.setFinish(true)
                this.finishTime = GetTickCount()
                this.span = (int)(this.finishTime - this.getStartTime())

                // This is a loop.
                for (macData in this.owner) {


                    // This is an agent decision.
                    if (macData.key.getClass() == ecosystem.Resource) {

                        // This is a task.
                        def res = macData.key
                        def p= macData.value
                        double deltaRank = (p*this.needResourceCapacity[res.getType()]*(this.productQuality - this.expectQuality))/(Math.exp(this.span-this.processingTime))
                        res.owner.rank += deltaRank

                    } else  {


                        // This is an agent decision.
                        if (macData.key.getClass() == ecosystem.Service) {

                            // This is a task.
                            int amount = macData.key.resourceComposition.values().sum()
                            double deltaRank = (amount*macData.value*(this.productQuality - this.expectQuality))/(Math.exp(this.span-this.processingTime))
                            macData.key.owner.rank += deltaRank

                        } else  {


                        }

                    }

                }

                // This is a task.
                this.master.Finish(this)

            } else  {


            }

        } else  {


        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * Set the owner is add to the owner list
     * @method addOwner
     *
     */
    public void addOwner(user, p) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // add owner to the list
        this.owner[user] = p
    }

    /**
     *
     * Check if all the candidates are ready
     * @method CheckStatus
     *
     */
    @ScheduledMethod(
        start = 0.3d,
        interval = 1d,
        shuffle = true
    )
    public def CheckStatus() {


        // This is an agent decision.
        if (this.getPrepareStatus().values().count(false) == 0 && this.getPrepareStatus().size()>0) {

            // This is a task.
            this.processBehavior.Process(this)
            this.prepareStatus = [:]

        } else  {


        }
    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

