/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class Resource extends ecosystem.Machine  {

    /**
     *
     * This is an agent property.
     * @field sourceable
     *
     */
    @Parameter (displayName = "Source-able", usageName = "sourceable")
    public int getSourceable() {
        return sourceable
    }
    public void setSourceable(int newValue) {
        sourceable = newValue
    }
    public int sourceable = 0

    /**
     *
     * This is an agent property.
     * @field needCap
     *
     */
    @Parameter (displayName = "Need Capacity", usageName = "needCap")
    public Map getNeedCap() {
        return needCap
    }
    public void setNeedCap(Map newValue) {
        needCap = newValue
    }
    public Map needCap = [:]

    /**
     *
     * This is an agent property.
     * @field available
     *
     */
    @Parameter (displayName = "Available", usageName = "available")
    public int getAvailable() {
        return available
    }
    public void setAvailable(int newValue) {
        available = newValue
    }
    public int available = 0

    /**
     *
     * This is an agent property.
     * @field capacity
     *
     */
    @Parameter (displayName = "Capacity", usageName = "capacity")
    public int getCapacity() {
        return capacity
    }
    public void setCapacity(int newValue) {
        capacity = newValue
    }
    public int capacity = 0

    /**
     *
     * [service:amount]
     * @field master
     *
     */
    @Parameter (displayName = "Master", usageName = "master")
    public Map getMaster() {
        return master
    }
    public void setMaster(Map newValue) {
        master = newValue
    }
    public Map master = [:]

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Resource " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method Resource
     *
     */
    public def Resource() {

        // This is a task.
        responseBehavior = new ResourceResponse()
        assignBehavior = new ResourceAssign()
        releaseBehavior  = new ResourceRelease()
    }

    /**
     *
     * This is the step behavior.
     * @method Assign
     *
     */
    public void Assign(sc, amount) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.needCap[ sc ] = amount
        //println this.toString()
        this.setSourceable(this.getSourceable() - amount)
        this.assignTime = GetTickCount()

        // This is an agent decision.
        if (this.getFullLength() == 0) {

            // This is a task.
            this.setAvailable(this.getAvailable() - amount)
            sc.prepareStatus[this] = true
            this.needCap.remove(sc)

        } else  {

            // This is a task.
            sc.predecessor += this.jobList
            this.assignBehavior.Queue(sc,this)

        }
    }

    /**
     *
     * Response to the need call
     * @method Response
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.ServiceCall',
        watcheeFieldNames = 'inNeed',
        triggerCondition = '$watchee.getInNeed()',
        whenToTrigger = WatcherTriggerSchedule.IMMEDIATE
    )
    public void Response(ecosystem.ServiceCall watchedAgent) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // Decide to take the task or not
        if (true) {


            // This is an agent decision.
            if (responseBehavior.Exist(watchedAgent,this)) {

                // This is a task.
                this.responseList << watchedAgent

            } else  {


            }

        } else  {


        }
    }

    /**
     *
     * This is the step behavior.
     * @method addMaster
     *
     */
    public void addMaster(ser, amount) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.master[ser] = amount
    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

