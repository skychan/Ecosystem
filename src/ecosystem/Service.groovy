/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class Service extends ecosystem.Machine  {

    /**
     *
     * The service owner, if not only one
     * @field owner
     *
     */
    @Parameter (displayName = "Owner", usageName = "owner")
    public PureProvider getOwner() {
        return owner
    }
    public void setOwner(PureProvider newValue) {
        owner = newValue
    }
    public PureProvider owner = null

    /**
     *
     * [res:quantity]
     * @field resources
     *
     */
    @Parameter (displayName = "Resource Composition", usageName = "resources")
    public def getResources() {
        return resources
    }
    public void setResources(def newValue) {
        resources = newValue
    }
    public def resources = [:]

    /**
     *
     * This is an agent property.
     * @field available
     *
     */
    @Parameter (displayName = "Available", usageName = "available")
    public int getAvailable() {
        return available
    }
    public void setAvailable(int newValue) {
        available = newValue
    }
    public int available = 0

    /**
     *
     * The var to record compete order
     * @field compete
     *
     */
    @Parameter (displayName = "Compete", usageName = "compete")
    public def getCompete() {
        return compete
    }
    public void setCompete(def newValue) {
        compete = newValue
    }
    public def compete = []

    /**
     *
     * Record be chose or not
     * @field chose
     *
     */
    @Parameter (displayName = "Chose", usageName = "chose")
    public boolean getChose() {
        return chose
    }
    public void setChose(boolean newValue) {
        chose = newValue
    }
    public boolean chose = false

    /**
     *
     * Count the finished jobs
     * @field finish
     *
     */
    @Parameter (displayName = "Finished", usageName = "finish")
    public int getFinish() {
        return finish
    }
    public void setFinish(int newValue) {
        finish = newValue
    }
    public int finish = 0

    /**
     *
     * Job list
     * @field jobList
     *
     */
    @Parameter (displayName = "Job List", usageName = "jobList")
    public def getJobList() {
        return jobList
    }
    public void setJobList(def newValue) {
        jobList = newValue
    }
    public def jobList = []

    /**
     *
     * Review history
     * @field reviews
     *
     */
    @Parameter (displayName = "Review History", usageName = "reviews")
    public def getReviews() {
        return reviews
    }
    public void setReviews(def newValue) {
        reviews = newValue
    }
    public def reviews = []

    /**
     *
     * The ready task mark
     * @field readyTask
     *
     */
    @Parameter (displayName = "Ready Task", usageName = "readyTask")
    public def getReadyTask() {
        return readyTask
    }
    public void setReadyTask(def newValue) {
        readyTask = newValue
    }
    public def readyTask = []

    /**
     *
     * This is the task buffer
     * @field buffer
     *
     */
    @Parameter (displayName = "Buffer", usageName = "buffer")
    public def getBuffer() {
        return buffer
    }
    public void setBuffer(def newValue) {
        buffer = newValue
    }
    public def buffer = []

    /**
     *
     * Mark queue in joblist or not
     * @field queue
     *
     */
    @Parameter (displayName = "Queue Status", usageName = "queue")
    public boolean getQueue() {
        return queue
    }
    public void setQueue(boolean newValue) {
        queue = newValue
    }
    public boolean queue = false

    /**
     *
     * This is an agent property.
     * @field queueLength
     *
     */
    @Parameter (displayName = "Queue Length", usageName = "queueLength")
    public int getQueueLength() {
        return queueLength
    }
    public void setQueueLength(int newValue) {
        queueLength = newValue
    }
    public int queueLength = 0

    /**
     *
     * This is an agent property.
     * @field shiftTask
     *
     */
    @Parameter (displayName = "Shift Task", usageName = "shiftTask")
    public def getShiftTask() {
        return shiftTask
    }
    public void setShiftTask(def newValue) {
        shiftTask = newValue
    }
    public def shiftTask = []

    /**
     *
     * This is an agent property.
     * @field chosenTime
     *
     */
    @Parameter (displayName = "Chosen time", usageName = "chosenTime")
    public double getChosenTime() {
        return chosenTime
    }
    public void setChosenTime(double newValue) {
        chosenTime = newValue
    }
    public double chosenTime = 0

    /**
     *
     * This is an agent property.
     * @field qualityFeature
     *
     */
    @Parameter (displayName = "Quality Feature", usageName = "qualityFeature")
    public def getQualityFeature() {
        return qualityFeature
    }
    public void setQualityFeature(def newValue) {
        qualityFeature = newValue
    }
    public def qualityFeature = [:]

    /**
     *
     * This is an agent property.
     * @field appetite
     *
     */
    @Parameter (displayName = "Appetite", usageName = "appetite")
    public def getAppetite() {
        return appetite
    }
    public void setAppetite(def newValue) {
        appetite = newValue
    }
    public def appetite = 0

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Service " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method addResource
     *
     */
    public def addResource(res, amount) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.resources[res] = amount
        res.setMaster(this)
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method Release
     *
     */
    public void Release(int amount) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        int temp = this.getAvailable()
        temp += amount
        this.setAvailable(temp)
    }

    /**
     *
     * Response to the need call
     * @method Response
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Task',
        watcheeFieldNames = 'inNeed',
        triggerCondition = '$watchee.getType() == $watcher.getAppetite() && $watchee.inNeed',
        whenToTrigger = WatcherTriggerSchedule.LATER,
        scheduleTriggerDelta = 0.1d
    )
    public def Response(ecosystem.Task watchedAgent) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // Decide to take the task or not
        if (true) {

            // change the compete state
            this.compete << watchedAgent
            watchedAgent.addServiceCandidates(this)
            //println this.toString() + " compete " + watchedAgent.toString()

        } else  {


        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * Change the service rank with depends on the review
     * @method getRank
     *
     */
    public def getRank() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        PureProvider user = this.owner
        returnValue = user.getRank()
        // Return the results.
        return returnValue

    }

    /**
     *
     * Add review to history
     * @method AddReview
     *
     */
    public def AddReview(rvalue) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        //println "add demander's review to the history"
        this.reviews << rvalue
        // Return the results.
        return returnValue

    }

    /**
     *
     * Check if a task in the compete list
     * @method Exist
     *
     */
    public boolean Exist(checkList, tester) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        returnValue = (tester in checkList)
        // Return the results.
        return returnValue

    }

    /**
     *
     * Chosen process
     * @method Chosen
     *
     */
    public def Chosen(theOne) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.compete.remove(theOne)

        // This is an agent decision.
        if (this.getAvailable() < theOne.needResourceCapacity[this.getType()]) {

            // This is a task.
            this.jobList << theOne
            println this.toString() + " jobList " + this.jobList
            println this.toString() + " buffer " + this.buffer
            println this.toString() + " readytask " + this.readyTask
            this.queueLength += 1
            this.setQueue(true)
            println this.toString() + " with type "+ this.getType()+ " queue length=" + this.getQueueLength()

        } else  {

            // This is a task.
            this.buffer << theOne
            this.setAvailable(this.getAvailable()-theOne.needResourceCapacity[this.getType()])
            double t = RunEnvironment.getInstance().getCurrentSchedule().getTickCount()
            int delta =  t - theOne.getChosenTime()
            theOne.responseTime[this] = delta
            theOne.inBufferTime[this] = t
            println this.toString() + " jobList " + this.jobList
            println this.toString() + " buffer " + this.buffer
            println this.toString() + " readytask " + this.readyTask

        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * Chose the next task
     * @method Next
     *
     */
    public def Next() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is a loop.
        for (theOne in this.jobList) {


            // This is an agent decision.
            if (this.getAvailable() >= theOne.needResourceCapacity[this.getType()]) {

                // This is a task.
                this.buffer << theOne
                this.setAvailable(this.getAvailable()-theOne.needResourceCapacity[this.getType()])
                this.shiftTask << theOne
                this.setQueue(false)
                // This is a task.
                this.queueLength -= 1
                println this.toString() + " with type "+ this.getType()+ " queue length=" + this.getQueueLength()
                double t = RunEnvironment.getInstance().getCurrentSchedule().getTickCount()
                int delta = t - theOne.getChosenTime()
                theOne.responseTime[this] = delta
                theOne.inBufferTime[this] = t

            } else  {


            }

        }


        // This is a loop.
        for (theOne in this.shiftTask) {

            // This is a task.
            this.jobList.remove(theOne)

        }

        // This is a task.
        this.shiftTask = []
        // Return the results.
        return returnValue

    }

    /**
     *
     * Review and comment after the task is finished
     * @method Review
     *
     */
    public def Review(theTask) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        double q = theTask.getProductQuality()
        int t = theTask.responseTime[this]
        double h = theTask.getHardness()
        int p = theTask.getProcessingTime()
        this.reviews <<  (h * q / (t+p))
        // This is a task.
        this.owner.addTaskFrequency(theTask)
        // Return the results.
        return returnValue

    }

    /**
     *
     * Change the service rank with depends on the review
     * @method getQuality
     *
     */
    public double getQuality() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        RandomHelper.createNormal(this.qualityFeature['mu'],this.qualityFeature['sigma'])
        returnValue = RandomHelper.getNormal().nextDouble()
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method step
     *
     */
    public def step() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method changeQuality
     *
     */
    public def changeQuality() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.qualityFeature['mu'] = this.WM(this.resources)
        this.qualityFeature['sigma'] = this.WSTD(this.resources)
        // Return the results.
        return returnValue

    }

    /**
     *
     * Calculate weighted average
     * @method WM
     *
     */
    public def WM(dataMap) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        double tempsum = 0
        int n = 0

        // This is a loop.
        for (data in dataMap) {

            // This is a task.
            tempsum += data.key.getQuality()*data.value
            n += data.value

        }

        // This is a task.
        returnValue = tempsum/n
        // Return the results.
        return returnValue

    }

    /**
     *
     * Calculate the standard variation
     * @method WSTD
     *
     */
    public def WSTD(dataMap) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        double tempsum = 0
        int n = 0
        double mean = this.WM(dataMap)

        // This is a loop.
        for (data in dataMap) {

            // This is a task.
            tempsum += (data.key.getQuality() - mean)*(data.key.getQuality() - mean) *data.value
            n += data.value

        }

        // This is a task.
        returnValue = Math.sqrt(tempsum/n)
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method getFullLength
     *
     */
    public int getFullLength() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        returnValue = this.jobList.size() + this.buffer.size() + this.readyTask.size()
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

