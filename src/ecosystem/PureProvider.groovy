/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class PureProvider  {

    /**
     *
     * Record the service
     * @field services
     *
     */
    @Parameter (displayName = "Service List", usageName = "services")
    public ArrayList getServices() {
        return services
    }
    public void setServices(ArrayList newValue) {
        services = newValue
    }
    public ArrayList services = new ArrayList()

    /**
     *
     * This is an agent property.
     * @field property
     *
     */
    @Parameter (displayName = "Property", usageName = "property")
    public def getProperty() {
        return property
    }
    public void setProperty(def newValue) {
        property = newValue
    }
    public def property = 0

    /**
     *
     * The provider Rank value
     * @field rankVal
     *
     */
    @Parameter (displayName = "Rank", usageName = "rankVal")
    public double getRankVal() {
        return rankVal
    }
    public void setRankVal(double newValue) {
        rankVal = newValue
    }
    public double rankVal = 0

    /**
     *
     * This is an agent property.
     * @field serviceList
     *
     */
    @Parameter (displayName = "Service List", usageName = "serviceList")
    public def getServiceList() {
        return serviceList
    }
    public void setServiceList(def newValue) {
        serviceList = newValue
    }
    public def serviceList = []

    /**
     *
     * This is an agent property.
     * @field resourceList
     *
     */
    @Parameter (displayName = "Resource List", usageName = "resourceList")
    public def getResourceList() {
        return resourceList
    }
    public void setResourceList(def newValue) {
        resourceList = newValue
    }
    public def resourceList = []

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "PureProvider " + (agentIDCounter++)

    /**
     *
     * Generate Resource
     * @method GenerateResource
     *
     */
    public void GenerateResource() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        ArrayList test = 1..50
        SimUtilities.shuffle(test,RandomHelper.getUniform())

        // This is a loop.
        for (i in 0..<RandomHelper.nextIntFromTo(1,10)) {

            // This is a task.
            Object ragent = CreateAgent("Ecosystem", "ecosystem.Resource")
            Resource res = (Resource) ragent
            res.setType(test[i])
            res.setCapacity(RandomHelper.nextIntFromTo(10, 17))
            res.setAvailable(res.getCapacity())
            // This is a task.
            res.addOwner(this)
            this.addResource(res)

        }

    }

    /**
     *
     * This is the step behavior.
     * @method addService
     *
     */
    public def addService(ser) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.serviceList << ser
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method addResource
     *
     */
    public def addResource(res) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.resourceList << res
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

