/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class PureProvider  {

    /**
     *
     * Record the service
     * @field services
     *
     */
    @Parameter (displayName = "Service List", usageName = "services")
    public ArrayList getServices() {
        return services
    }
    public void setServices(ArrayList newValue) {
        services = newValue
    }
    public ArrayList services = new ArrayList()

    /**
     *
     * The provider difficulty rank value
     * @field rank
     *
     */
    @Parameter (displayName = "Rank", usageName = "rank")
    public double getRank() {
        return rank
    }
    public void setRank(double newValue) {
        rank = newValue
    }
    public double rank = 1000

    /**
     *
     * This is an agent property.
     * @field serviceList
     *
     */
    @Parameter (displayName = "Service List", usageName = "serviceList")
    public def getServiceList() {
        return serviceList
    }
    public void setServiceList(def newValue) {
        serviceList = newValue
    }
    public def serviceList = []

    /**
     *
     * This is an agent property.
     * @field resourceList
     *
     */
    @Parameter (displayName = "Resource List", usageName = "resourceList")
    public def getResourceList() {
        return resourceList
    }
    public void setResourceList(def newValue) {
        resourceList = newValue
    }
    public def resourceList = []

    /**
     *
     * This is an agent property.
     * @field candidates
     *
     */
    @Parameter (displayName = "Resource candidates", usageName = "candidates")
    public def getCandidates() {
        return candidates
    }
    public void setCandidates(def newValue) {
        candidates = newValue
    }
    public def candidates = []

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "PureProvider " + (agentIDCounter++)

    /**
     *
     * Generate Resource
     * @method GenerateResource
     *
     */
    public void GenerateResource(typeQuality, typeQueueLength) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        ArrayList types = 1..10
        SimUtilities.shuffle(types,RandomHelper.getUniform())

        // This is a loop.
        for (i in 0..<RandomHelper.nextIntFromTo(1,4)) {

            // This is a task.
            Resource res = new Resource()
            res.setQuality(RandomHelper.nextDoubleFromTo(0,30))
            res.setType(types[i])
            res.setCapacity(RandomHelper.nextIntFromTo(10, 17))
            res.setAvailable(res.getCapacity())
            // This is a task.
            res.addOwner(this)
            this.candidates << res
            println "create resource " + res.toString() + " with type " + res.getType()
            this.ResourceJudege(typeQuality,typeQueueLength,types[i],res)

        }

    }

    /**
     *
     * This is the step behavior.
     * @method addService
     *
     */
    public def addService(ser) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.serviceList << ser
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method addResource
     *
     */
    public def addResource(res) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.resourceList << res
        // Return the results.
        return returnValue

    }

    /**
     *
     * Calculate the rank value depend on the resources' quality and scaricity
     * @method ranking
     *
     */
    public def ranking() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Return the results.
        return returnValue

    }

    /**
     *
     * Judge the resource to exit
     * @method ResourceJudege
     *
     */
    public def ResourceJudege(typeQuality, typeQueueLength, type, res) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (type in typeQuality.keySet()) {


            // This is an agent decision.
            if (typeQueueLength[type] < 5) {

                // This is a task.
                double mu = this.WM(typeQuality[type])
                double sigma = this.WSTD(typeQuality[type])
                RandomHelper.createNormal(mu,sigma)

                // This is an agent decision.
                if (RandomHelper.getNormal().nextDouble() > res.getQuality()) {

                    // This is a task.
                    this.candidates.remove(res)

                } else  {


                }

            } else  {


            }

        } else  {


        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method Enter
     *
     */
    public def Enter(platform) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (this.candidates.isEmpty()) {

            // This is a task.
            returnValue = false

        } else  {


            // This is a loop.
            for (res in this.candidates) {

                // This is a task.
                AddAgentToContext("Ecosystem", res)
                this.addResource(res)
                platform.Indexing(res)
                platform.NewQueue(res)

            }

            // This is a task.
            this.candidates = []
            returnValue = true

        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * Calculate weighted average
     * @method WM
     *
     */
    public def WM(dataMap) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        double tempsum = 0
        int n = 0

        // This is a loop.
        for (data in dataMap) {

            // This is a task.
            tempsum += data.key*data.value
            n += data.value

        }

        // This is a task.
        returnValue = tempsum/n
        // Return the results.
        return returnValue

    }

    /**
     *
     * Calculate the standard variation
     * @method WSTD
     *
     */
    public def WSTD(dataMap) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        double tempsum = 0
        int n = 0
        double mean = this.WM(dataMap)

        // This is a loop.
        for (data in dataMap) {

            // This is a task.
            tempsum += (data.key - mean)*(data.key - mean) *data.value
            n += data.value

        }

        // This is a task.
        returnValue = Math.sqrt(tempsum/n)
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

