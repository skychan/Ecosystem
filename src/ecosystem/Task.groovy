/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package ecosystem

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class Task  {

    /**
     *
     * This is an agent property.
     * @field type
     *
     */
    @Parameter (displayName = "Type", usageName = "type")
    public def getType() {
        return type
    }
    public void setType(def newValue) {
        type = newValue
    }
    public def type = -1

    /**
     *
     * This is an agent property.
     * @field needResourceCapacity
     *
     */
    @Parameter (displayName = "NeedResourceCapacity", usageName = "needResourceCapacity")
    public def getNeedResourceCapacity() {
        return needResourceCapacity
    }
    public void setNeedResourceCapacity(def newValue) {
        needResourceCapacity = newValue
    }
    public def needResourceCapacity = [:]

    /**
     *
     * This is an agent property.
     * @field processingTime
     *
     */
    @Parameter (displayName = "ProcessingTime", usageName = "processingTime")
    public int getProcessingTime() {
        return processingTime
    }
    public void setProcessingTime(int newValue) {
        processingTime = newValue
    }
    public int processingTime = 0

    /**
     *
     * This is an agent property.
     * @field selectedResource
     *
     */
    @Parameter (displayName = "Selected Resource", usageName = "selectedResource")
    public String getSelectedResource() {
        return selectedResource
    }
    public void setSelectedResource(String newValue) {
        selectedResource = newValue
    }
    public String selectedResource = ""

    /**
     *
     * This is an agent property.
     * @field remainingTime
     *
     */
    @Parameter (displayName = "RemainingTime", usageName = "remainingTime")
    public int getRemainingTime() {
        return remainingTime
    }
    public void setRemainingTime(int newValue) {
        remainingTime = newValue
    }
    public int remainingTime = -1

    /**
     *
     * Record the owners of the task
     * @field owner
     *
     */
    @Parameter (displayName = "Owners", usageName = "owner")
    public def getOwner() {
        return owner
    }
    public void setOwner(def newValue) {
        owner = newValue
    }
    public def owner = []

    /**
     *
     * the mark of the task stage
     * @field finish
     *
     */
    @Parameter (displayName = "Finish", usageName = "finish")
    public boolean getFinish() {
        return finish
    }
    public void setFinish(boolean newValue) {
        finish = newValue
    }
    public boolean finish = false

    /**
     *
     * Record the master of the task
     * @field master
     *
     */
    @Parameter (displayName = "Master", usageName = "master")
    public def getMaster() {
        return master
    }
    public void setMaster(def newValue) {
        master = newValue
    }
    public def master = []

    /**
     *
     * Denote calling for the new resources
     * @field call
     *
     */
    @Parameter (displayName = "Call", usageName = "call")
    public def getCall() {
        return call
    }
    public void setCall(def newValue) {
        call = newValue
    }
    public def call = 0

    /**
     *
     * Record the candidates
     * @field candidates
     *
     */
    @Parameter (displayName = "Candidates", usageName = "candidates")
    public def getCandidates() {
        return candidates
    }
    public void setCandidates(def newValue) {
        candidates = newValue
    }
    public def candidates = [:]

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Task " + (agentIDCounter++)

    /**
     *
     * Processing the task every time
     * @method Processing
     *
     */
    public void Processing() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        int remaintime = this.getRemainingTime()
        remaintime--
        this.setRemainingTime(remaintime)

        // This is an agent decision.
        if (this.getRemainingTime()) {

            // send the task change status signal
            this.setFinish(true)

        } else  {


        }
    }

    /**
     *
     * This is the step behavior.
     * @method Select
     *
     */
    public void Select(String index) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.setSelectedResource(index)
        int remaintime = this.getProcessingTime().get(index)
        this.setRemainingTime(remaintime)
    }

    /**
     *
     * This is the step behavior.
     * @method setParameters
     *
     */
    public void setParameters(tdata) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is a loop.
        for (data in tdata.value) {


            // This is an agent decision.
            if (data.key == "p") {

                // This is a task.
                this.setProcessingTime(data.value)

            } else  {

                // This is a task.
                this.needResourceCapacity << data

            }

        }

        // This is a task.
        this.setCall(this.getNeedResourceCapacity())
    }

    /**
     *
     * Set the owner is add to the owner list
     * @method addOwner
     *
     */
    public void addOwner(ownerID) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // add owner to the list
        this.owner << ownerID
    }

    /**
     *
     * Set the owner is add to the owner list
     * @method addMaster
     *
     */
    public void addMaster(masterID) {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // add master to the list
        this.master << masterID
    }

    /**
     *
     * Select provider
     * @method Select
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Resource',
        watcheeFieldNames = 'compete',
        triggerCondition = '$watcher.toString() == $watchee.compete.toString()',
        whenToTrigger = WatcherTriggerSchedule.LATER,
        scheduleTriggerDelta = 0.2d,
        scheduleTriggerPriority = -1.7976931348623157E308d
    )
    public def Select(ecosystem.Resource watchedAgent) {

        // Select proper supplier with evaluation
        println "candidates are "+this.getCandidates()
        Evaluation()
        println "after sort we have " +this.getCandidates()
        this.setAllocatedService(this.getCandidates()[0])
        this.getAllocatedService().getJobList().add(this)
        // Reset the candidates after selection
        this.candidates.clear()
        System.out.println("Provider Chosen: "+this.allocatedService)
    }

    /**
     *
     * Supplier Evaluation
     * @method Evaluation
     *
     */
    public def Evaluation() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        this.getCandidates().sort{[it.jobList.size(),it.jobList[0]]}
        // Return the results.
        return returnValue

    }

    /**
     *
     * Review the transaction
     * @method Review
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Service',
        watcheeFieldNames = 'finish',
        triggerCondition = '$watchee.getOrder().equals($watcher)',
        whenToTrigger = WatcherTriggerSchedule.IMMEDIATE
    )
    public def Review(ecosystem.Service watchedAgent) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Review and Commit
        println "review and commit"
        def rvalue = 0
        watchedAgent.AddReview(rvalue)
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method addCandidates
     *
     */
    @Watch(
        watcheeClassName = 'ecosystem.Resource',
        watcheeFieldNames = 'compete',
        triggerCondition = '$watcher.toString() == $watchee.compete.toString()',
        whenToTrigger = WatcherTriggerSchedule.LATER,
        scheduleTriggerDelta = 0.1d
    )
    public def addCandidates(ecosystem.Resource watchedAgent) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (this.candidates[watchedAgent.getType()]) {

            // This is a task.
            this.candidates[watchedAgent.getType()]<<watchedAgent

        } else  {

            // This is a task.
            this.candidates[watchedAgent.getType()] = watchedAgent

        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

